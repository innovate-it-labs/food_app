

---

# 🍽️ Foodie App - UserApp;

## Base URL

```
https://your-backend-domain.com/api/users/
```

---

## 📌 Authentication & User Management

### 🔹 Signup User

**Endpoint**: `POST /signup/`
**Description**: Registers a new user with email and password.

#### Request Body:

```json
{
  "email": "user@example.com",
  "password": "strongpassword",
  "full_name": "Ajay Yadav"
}
```

#### Response:

```json
{
  "refresh": "JWT_REFRESH_TOKEN",
  "access": "JWT_ACCESS_TOKEN"
}
```

---

### 🔹 Login User

**Endpoint**: `POST /login/`
**Description**: Logs in a user and returns JWT tokens.

#### Request Body:

```json
{
  "email": "user@example.com",
  "password": "strongpassword"
}
```

#### Response:

```json
{
  "refresh": "JWT_REFRESH_TOKEN",
  "access": "JWT_ACCESS_TOKEN",
  "email": "user@example.com"
}
```

---

### 🔹 Refresh Token

**Endpoint**: `POST /refresh-token/`
**Description**: Refresh JWT token.

#### Request Body:

```json
{
  "refresh": "JWT_REFRESH_TOKEN"
}
```

#### Response:

```json
{
  "access": "NEW_JWT_ACCESS_TOKEN"
}
```

---

## 🔐 Password Management

### 🔹 Forgot Password

**Endpoint**: `POST /forgot-password/`
**Description**: Sends a password reset link to the user’s email.

#### Request Body:

```json
{
  "email": "user@example.com"
}
```

#### Response:

```json
{
  "message": "Reset link sent successfully."
}
```

---

### 🔹 Reset Password

**Endpoint**: `POST /reset-password/<uidb64>/<token>/`
**Description**: Resets the user's password using the reset token.

#### Request Body:

```json
{
  "password": "newStrongPassword"
}
```

#### Response:

```json
{
  "message": "Password reset successfully."
}
```

---

## 🔄 User Type Setting

### 🔹 Set User Type

**Endpoint**: `POST /set-user-type/`
**Auth Required**: ✅ JWT Access Token
**Description**: Sets user type to either `seller` or `customer`.

#### Headers:

```
Authorization: Bearer <access_token>
```

#### Request Body:

```json
{
  "user_type": "customer"
}
```

#### Response:

```json
{
  "detail": "User type created successfully."
}
```

---

## 🛍️ Seller APIs

### 🔹 Register Seller

**Endpoint**: `POST /seller/register/`
**Auth Required**: ✅
**Description**: Create a seller profile.

#### Request Body:

```json
{
  "shop_name": "My Store",
  "gst_number": "123456789",
  "address": "Main Road, Delhi",
  "city": "Delhi",
  "logo": null  // (use multipart/form-data to upload an image)
}
```

#### Response:

```json
{
  "user": 1,
  "shop_name": "My Store",
  "gst_number": "123456789",
  "address": "Main Road, Delhi",
  "city": "Delhi",
  "logo": null,
  "verified": false
}
```

---

### 🔹 Seller Profile

**Endpoint**: `GET /seller/profile/` or `PUT`
**Auth Required**: ✅
**Description**: Retrieve or update the seller profile.

#### Response (GET):

```json
{
  "user": 1,
  "shop_name": "My Store",
  "gst_number": "123456789",
  "address": "Main Road, Delhi",
  "city": "Delhi",
  "logo": null,
  "verified": false
}
```

---

## 🧑‍🍳 Customer APIs

### 🔹 Register Customer

**Endpoint**: `POST /customer/register/`
**Auth Required**: ✅
**Description**: Create a customer profile.

#### Request Body:

```json
{
  "name": "Ajay",
  "address": "Gurgaon",
  "city": "Gurgaon",
  "state": "Haryana",
  "preferences": {
    "veg_only": true
  },
  "profile_picture": null  // (use multipart/form-data to upload)
}
```

#### Response:

```json
{
  "user": 1,
  "name": "Ajay",
  "address": "Gurgaon",
  "city": "Gurgaon",
  "state": "Haryana",
  "preferences": {
    "veg_only": true
  },
  "profile_picture": null
}
```

---

### 🔹 Customer Profile

**Endpoint**: `GET /customer/profile/` or `PUT`
**Auth Required**: ✅
**Description**: Retrieve or update customer profile.

#### Response (GET):

```json
{
  "user": 1,
  "name": "Ajay",
  "address": "Gurgaon",
  "city": "Gurgaon",
  "state": "Haryana",
  "preferences": {
    "veg_only": true
  },
  "profile_picture": null
}
```

---

## 🔐 Google OAuth Login

### 🔹 Google Social Login

**Endpoint**: `POST /google-login/` *(Add this in `urls.py`)*
**Description**: Login or register via Google access token.

#### Request Body:

```json
{
  "access_token": "GOOGLE_ACCESS_TOKEN"
}
```

#### Response:

```json
{
  "access": "JWT_ACCESS_TOKEN",
  "refresh": "JWT_REFRESH_TOKEN",
  "user": {
    "email": "user@example.com",
    "name": "Ajay",
    "id": 3
  }
}
```

---

## 📝 Notes

* Use JWT access tokens for authenticated requests.
* Use `multipart/form-data` for image uploads.
* Handle frontend routes like password reset links carefully by matching the URL structure.

---

